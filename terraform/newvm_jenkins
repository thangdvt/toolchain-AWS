aws_region = "us-west-2"
ec2_instance_type = "t2.micro"
# Terraform Settings Block
terraform {
  # Terraform Version
  required_version = "~> 1.3.7"
  required_providers {
    # AWS Provider 
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
    
  }
  }
# Provider Block
provider "aws" {
  region  = var.aws_region
}
# Input Variables
variable "aws_region" {
  description = "Region in which AWS resource to be created"
  type        = string
  default     = "us-west-2"

}


variable "ec2_instance_type" {
  description = "EC2 Instance type "
  type        = string
  default     = "t2.micro"

}


variable "instance_keypair" {
  description = "AWS EC2 Key Pair that need to be associated with EC2 Instance"
  type = string
  default = "terraform-key"
}
# Resource Block
# Resource-1: Create VPC
resource "aws_vpc" "vpc-dev" {
  cidr_block = "10.0.0.0/16"
  tags = {
    "Name" = "vpc-jenkins"
  }
}


#Resource-2: Create Subnets
resource "aws_subnet" "vpc-dev-public-subnet-1" {
    vpc_id = aws_vpc.vpc-dev.id
    cidr_block = "10.0.0.0/24"
    availability_zone = "us-west-2c"
    map_public_ip_on_launch = true
}

#Resource-3: Internet Gateway
resource "aws_internet_gateway" "vpc-dev-igw" {
    vpc_id = aws_vpc.vpc-dev.id
}

#Resource-4: Create Route Table
resource "aws_route_table" "vpc-dev-pubilc-route-table" {
    vpc_id = aws_vpc.vpc-dev.id
}

#Resource-5: Create Route in Route Table for Internet Access
resource "aws_route" "vpc-dev-pubilc-route" {
    route_table_id = aws_route_table.vpc-dev-pubilc-route-table.id
    destination_cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.vpc-dev-igw.id
}

#Resource-6: Associate the Route Table with the subnet
resource "aws_route_table_association" "vpc-dev-public-route-table-associate" {
    route_table_id = aws_route_table.vpc-dev-pubilc-route-table.id
    subnet_id = aws_subnet.vpc-dev-public-subnet-1.id
}
#Resource: Create Security Group
resource "aws_security_group" "dev-vpc-sg" {
      name = "dev-vpc-default-sg"
      description = "Dec VPC Default Security Group"
      vpc_id = aws_vpc.vpc-dev.id
      ingress {
      #Allow SSH 
        description = "Allow Port 22"
        from_port   = 22
        to_port     = 22
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
      }

      
      ingress {
      #Allow port for jenkins
        description = "Allow Port 8080"
        from_port   = 8080
        to_port     = 8080
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
      }
      
      

      egress {
        description = "Allow all IP and Ports Outbound"
        from_port   = 0
        to_port     = 0
        protocol    = "-1"
        cidr_blocks = ["0.0.0.0/0"]
      }
}
# IAM ROLE 
resource "aws_iam_role" "jenkins_role" {
      name = "jenkins_role"

      assume_role_policy = jsonencode({
        Version = "2012-10-17"
        Statement = [
          {
            Action = "sts:AssumeRole"
            Effect = "Allow"
            Sid    = ""
            Principal = {
              Service = "ec2.amazonaws.com"
            }
          },
        ]
      })
    }







# attached aws ec2 policy is attached

resource "aws_iam_role_policy_attachment" "ec2full_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
  role       = aws_iam_role.jenkins_role.name
}


# attached aws ecr policy is attached

resource "aws_iam_role_policy_attachment" "ecr_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess"
  role       = aws_iam_role.jenkins_role.name
  
}

# attached aws vpc policy is attached

resource "aws_iam_role_policy_attachment" "vpc_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonVPCFullAccess"
  role       =  aws_iam_role.jenkins_role.name
  
  
  }

# attached aws iam policy is attached

resource "aws_iam_role_policy_attachment" "iam_policy" {
  policy_arn =  "arn:aws:iam::aws:policy/IAMFullAccess"
  role       =  aws_iam_role.jenkins_role.name
 
  
  }
  
resource "aws_iam_instance_profile" "jenkins_instance_profile" {
  name  = "jenkins_instance_profile"
  role = "${aws_iam_role.jenkins_role.name}"
}
data "aws_ami" "amzlinux" {
       most_recent = true
       owners = [ "amazon" ]
       filter {
            name   = "name"
            values = ["amzn2-ami-kernel-*-hvm-*-gp2"]
            
  }

      filter {
            name   = "root-device-type"
            values = ["ebs"]
  }

      filter {
            name   = "virtualization-type"
            values = ["hvm"]
  }
     filter {
            name   = "architecture"
            values = ["x86_64"]
      } 
}
resource "aws_instance" "jenkins_server" {
  ami                    = data.aws_ami.amzlinux.id
  instance_type          = var.ec2_instance_type
  key_name               = var.instance_keypair
  subnet_id = aws_subnet.vpc-dev-public-subnet-1.id
  vpc_security_group_ids = [ aws_security_group.dev-vpc-sg.id ]
  
  iam_instance_profile = "${aws_iam_instance_profile.jenkins_instance_profile.name}"
    
  
  
  tags = {
    "Name" = "jenkins_server"
    }
  
  connection {
        type = "ssh"
        host = "${self.public_ip}"
        user = "ec2-user"
        password = ""
        private_key = file("private-key/terraform-key.pem")
  }  
  
  provisioner "remote-exec" {
        inline = [
          "sudo amazon-linux-extras install ansible2 -y",
          "sudo yum install git -y",
          "git clone https://github.com/KavyaPallamreddy/jenkins_setup_ansible.git /tmp/Jenkins_ansibe_role",
          "ansible-playbook  /tmp/Jenkins_ansibe_role/playbook.yaml",
          "sudo chmod +x /tmp/Jenkins_ansibe_role/Adding_path_to_bash_profile.sh /tmp/Jenkins_ansibe_role/search_java_maven_paths.py",
          "sudo /tmp/Jenkins_ansibe_role/Adding_path_to_bash_profile.sh"
        ]
      }
  
  }
output "ec2_instance_publicip" {
    description = "EC2 Instance Public IP"
    value = aws_instance.jenkins_server[*].public_ip
    }
# Generic Variables

